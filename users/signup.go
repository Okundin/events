package users

import (
	"events-app/db"
	"log"
	"net/http"

	"github.com/gin-gonic/gin"
)

type User struct {
	ID        int64
	Email     string `binding:"required"`
	Password  string `binding:"required"`
	FirstName string `binding:"required"`
	LastName  string `binding:"required"`
}

func SignUp(ctx *gin.Context) {
	// Parsing users' JSON POST request
	var user User
	err := ctx.ShouldBindJSON(&user)
	if err != nil {
		ctx.JSON(http.StatusBadRequest, gin.H{"message": "Could not parse user JSON request!"})
		return
	}
	// create new user in the users DB
	err = user.new()
	if err != nil {
		ctx.JSON(http.StatusInternalServerError, gin.H{"message": "Could not create user!"})
		return
	}

	ctx.JSON(http.StatusCreated, gin.H{"message": "User successfully created!"})

}

// create new user method
func (u *User) new() error {
	query := "INSERT INTO users (email, password, first_name, last_name) VALUES ($1, $2, $3, $4)"

	result, err := db.DB.Exec(query, u.Email, u.Password, u.FirstName, u.LastName)
	if err != nil {
		log.Fatalf("Error creating new user in users DB: v%\n", err)
	}
	// converting user's plain text password into hashed one

	// assign user id generated by the DB
	u.ID, err = result.LastInsertId()

	return err
}
